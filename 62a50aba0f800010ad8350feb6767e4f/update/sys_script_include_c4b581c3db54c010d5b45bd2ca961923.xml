<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>sn_kpi_composer.ProjectTaskCreateIndicator</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>ProjectTaskCreateIndicator</name>
        <script><![CDATA[var ProjectTaskCreateIndicator = Class.create();
ProjectTaskCreateIndicator.prototype = Object.extendsObject(sn_kpi_composer.ProjectTask, {
	
	createtasks: function(data) {
		var that = this;
		if (this.trace) this._debug.push("ProjectTaskCreateIndicator");	
		
		// Check Indicator with no pa_indicator link
		for(var idx = 0; idx<data.indicatordefinitions.length; idx++) {
			var indicator = data.indicatordefinitions[idx];

 			var defRecId = indicator.sys_id;
			var defTableNm = 'sn_kpi_composer_indicator_definition';

			var taskDefRec = this._addOrGetTaskDefinitionRecord(defTableNm, defRecId, data.project.sys_id);
			if (this.trace) this._debug.push("Lookup DefRecId 4: " + defRecId + " for DefRecTableNm: " + defTableNm + " => " + JSON.stringify(taskDefRec));
			
			// Generic update of the status
			this._updateTaskDefinitionStatus(taskDefRec, indicator, indicator.pa_indicator, data);

			if (this.trace) this._debug.push("UpdateTaskDefinitionStatus: " + JSON.stringify(taskDefRec));	

			// Set artifact source table
			taskDefRec.artifact_table = 'pa_indicators';

			// Set the artifact target record
			taskDefRec.artifact_record = indicator.pa_indicator;

			var desc = taskDefRec.validationerrors;

			desc += gs.getMessage("Indicator name: '{0}'", indicator.name || "(empty)");
			
			if (indicator.development_instructions) desc +=  gs.getMessage("\nDevelopment instructions: '{0}'", indicator.development_instructions);				
			if (indicator.dv_direction) desc += gs.getMessage("\nDirection: {0}", indicator.dv_direction);
			if (indicator.target)
				desc += gs.getMessage("\nTarget: {0}", indicator.target);

			if (indicator.indicator_type == this._indicatorDefinitionTypeManual) {
				// Nothing more to say - at this moment
			}
			if (indicator.indicator_type == this._indicatorDefinitionTypeFormula) {
				// Formula should have formula
				desc += gs.getMessage("\nFormula: {0}", indicator.formula || "(empty)");
			}
			if (indicator.indicator_type == this._indicatorDefinitionTypeAutomated) {
				// Automated should have: aggri, freq, fact and condition
				if (indicator.dv_aggregation) desc += gs.getMessage("\nAggregation: {0}", indicator.dv_aggregation);
				if (indicator.dv_frequency) desc += gs.getMessage("\nFrequency: {0}", indicator.dv_frequency);
				if (indicator.facts_table) desc += gs.getMessage("\nFacts table: {0}", indicator.facts_table);
				if (indicator.condition) desc += gs.getMessage("\nCondition: {0}", indicator.condition);
			}
			

			// Get all (distinct) other indicator defs
			var other_entities = this._projectApi.entityByIndicatorDefinition(indicator, data);
			if (this.trace) this._debug.push("Other entities (1): " + JSON.stringify(other_entities));

			// Get all (distinct) breakdowns from entities
			var dist_breakdown_ids = [];
			for(var eid = 0; eid<other_entities.length; eid++) {
				var entity = other_entities[eid];
				if (entity.breakdowns) {
					for(var bid = 0; bid<entity.breakdowns.length; bid++) {
						if (dist_breakdown_ids.indexOf(entity.breakdowns[bid])) {
							dist_breakdown_ids.push(entity.breakdowns[bid]);
						}
					}
				}
			}								

			desc += gs.getMessage("\nBreakdowns: ");

			if (dist_breakdown_ids.length > 0) {
				for(var bid = 0; bid<data.breakdowns.length; bid++) {
					if (dist_breakdown_ids.indexOf(data.breakdowns[bid].sys_id)>-1) {
						desc += "\n- " + data.breakdowns[bid].name;
					}
				}
			} else { 
				desc += gs.getMessage("No breakdowns selected!");
			}

			desc += "\n";

			taskDefRec.description = desc;

			var result = this._updateTaskDefinitionRecord(taskDefRec);
		}						
		
		
	},

    type: 'ProjectTaskCreateIndicator'
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2019-10-09 10:01:48</sys_created_on>
        <sys_id>c4b581c3db54c010d5b45bd2ca961923</sys_id>
        <sys_mod_count>27</sys_mod_count>
        <sys_name>ProjectTaskCreateIndicator</sys_name>
        <sys_package display_value="KPI Composer" source="sn_kpi_composer">62a50aba0f800010ad8350feb6767e4f</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="KPI Composer">62a50aba0f800010ad8350feb6767e4f</sys_scope>
        <sys_update_name>sys_script_include_c4b581c3db54c010d5b45bd2ca961923</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2021-09-10 08:13:20</sys_updated_on>
    </sys_script_include>
</record_update>
