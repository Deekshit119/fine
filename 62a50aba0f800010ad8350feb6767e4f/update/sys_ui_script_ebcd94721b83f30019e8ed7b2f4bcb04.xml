<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ui_script">
    <sys_ui_script action="INSERT_OR_UPDATE">
        <active>true</active>
        <description/>
        <global>false</global>
        <name>sn_kpi_composer.DasDesignContent</name>
        <script><![CDATA[var DashboardDesignContent = createReactClass({
	render: function() {
		var that = this;
		var dashboardetail = null;
		
		if (this.props.selecteddashboardid != null) {
			var dashboard = this.props.dashboards.filter(function (d) { return d.sys_id === that.props.selecteddashboardid; });
			if (dashboard.length > 0) {
				var detailprops = {
					dashboard: dashboard[0],
					dashboardtabs: this.props["dashboardtabs_" + dashboard[0].sys_id],
					widgettypes: this.props.widgettypes,
					entities: this.props.entities,
					timeseries: this.props.timeseries,
					spotlight_installed: this.props.spotlight_installed,
					getPossibleDashboardTabTemplates: this.props.getPossibleDashboardTabTemplates
				};
				if (this.props.readonly !== true) {
					detailprops.onDashboardTabSaveName = this.props.onDashboardTabSaveName;
					detailprops.onDashboardTabAdd = this.props.onDashboardTabAdd;
					detailprops.onDashboardTabDelete = this.props.onDashboardTabDelete;
					detailprops.onDashboardTabAddAsTemplate = this.props.onDashboardTabAddAsTemplate;
					detailprops.onDashboardTabMoveTo = this.props.onDashboardTabMoveTo;
					detailprops.onDashboardTabRowAdd = this.props.onDashboardTabRowAdd;
					detailprops.onDashboardTabRowDelete = this.props.onDashboardTabRowDelete;
					detailprops.onDashboardTabRowEdit = this.props.onDashboardTabRowEdit;
					detailprops.onDashboardTabRowMoveTo = this.props.onDashboardTabRowMoveTo;
					detailprops.onDashboardTabRowCanvasSaveTitle = this.props.onDashboardTabRowCanvasSaveTitle;
					detailprops.onDashboardTabRowCanvasEdit = this.props.onDashboardTabRowCanvasEdit;
					detailprops.onDashboardTabRowCanvasEntityDelete = this.props.onDashboardTabRowCanvasEntityDelete;
					detailprops.onDashboardTabRowCanvasEntityInsert = this.props.onDashboardTabRowCanvasEntityInsert;
					detailprops.onDashboardTabRowCanvasSaveWidgetVisualisation = this.props.onDashboardTabRowCanvasSaveWidgetVisualisation;
					detailprops.onDashboardTabRowCanvasMoveTo = this.props.onDashboardTabRowCanvasMoveTo;
				}
				for (var t = 0; t < detailprops.dashboardtabs.length; t++) {
					var rows = this.props["dashboardtabrows_" + detailprops.dashboardtabs[t].sys_id];
					detailprops["dashboardtabrows_" + detailprops.dashboardtabs[t].sys_id] = rows;
					for (var r = 0; r < rows.length; r++) {
						var canvasses = this.props["dashboardtabrowcanvasses_" + rows[r].sys_id];
						detailprops["dashboardtabrowcanvasses_" + rows[r].sys_id] = canvasses;
					}
				}
				dashboardetail = e(
					DashboardDetail,
					detailprops
				);
			}
		}

		var dashboardlistprops = {
			key: 'list',
			onDashboardSelect: this.props.onDashboardSelect,
			selecteddashboardid: this.props.selecteddashboardid,
			dashboards: this.props.dashboards,
			breakdowns: this.props.breakdowns,
			personas: this.props.personas,
			pa_dashboards: this.props.pa_dashboards
		};

		if (this.props.readonly !== true) {
			dashboardlistprops.onDashboardDelete = this.props.onDashboardDelete;
			dashboardlistprops.onDashboardMoveTo = this.props.onDashboardMoveTo;
			dashboardlistprops.onDashboardSaveName = this.props.onDashboardSaveName;
			dashboardlistprops.onDashboardSaveDescription = this.props.onDashboardSaveDescription;
			dashboardlistprops.onDashboardBreakdownDelete = this.props.onDashboardBreakdownDelete;
			dashboardlistprops.onDashboardBreakdownInsert = this.props.onDashboardBreakdownInsert;
			dashboardlistprops.onDashboardPersonaDelete = this.props.onDashboardPersonaDelete;
			dashboardlistprops.onDashboardPersonaInsert = this.props.onDashboardPersonaInsert;
			dashboardlistprops.onDashboardPaDashboardSave = this.props.onDashboardPaDashboardSave;
		}
		
		return [
			e(
				'div',
				{ key: 'top', className: 'wb-pa-quick-panel' },
				e(
					'div',
					{className:'wb-pa-quick-panel-content clearfix'},
					e(
						'div',
						{className: 'wb-pa-quick-panel-separator', style: { width: '50%'}},
						e(
							DraggableContainer,
							{datalist: this.props.personas, type: 'persona', category: 'Persona', displaytype: 'abbreviation', disableDragging: this.props.readonly}
						)
					),
					e(
						'div',
						{style: { width: '50%', paddingLeft: '10px'}},
						e(
							DraggableContainer,
							{datalist: this.props.breakdowns.filter(function(br) { return br.show; }), type: 'breakdown', category: 'Breakdown', displaytype: 'color', disableDragging: this.props.readonly}
						)
					)
				)
			),
			e(
				'div',
				{ key: 'middle', className: 'wb-pa-lanes wb-pa-lanes-scroll wb-pa-board-color-1 dashboarddesign' },
				e(
					DashboardList,
					dashboardlistprops
				),
				e(
					'div',
					{ key: 'detail', className: 'wb-pa-dashboarddetail' },
					dashboardetail
				)
			)
		];
	}
});]]></script>
        <script_name>DasDesignContent</script_name>
        <sys_class_name>sys_ui_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2019-08-07 09:09:56</sys_created_on>
        <sys_id>ebcd94721b83f30019e8ed7b2f4bcb04</sys_id>
        <sys_mod_count>59</sys_mod_count>
        <sys_name>sn_kpi_composer.DasDesignContent</sys_name>
        <sys_package display_value="KPI Composer" source="sn_kpi_composer">62a50aba0f800010ad8350feb6767e4f</sys_package>
        <sys_policy/>
        <sys_scope display_value="KPI Composer">62a50aba0f800010ad8350feb6767e4f</sys_scope>
        <sys_update_name>sys_ui_script_ebcd94721b83f30019e8ed7b2f4bcb04</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2021-01-16 11:02:22</sys_updated_on>
        <ui_type>0</ui_type>
        <use_scoped_format>false</use_scoped_format>
    </sys_ui_script>
</record_update>
