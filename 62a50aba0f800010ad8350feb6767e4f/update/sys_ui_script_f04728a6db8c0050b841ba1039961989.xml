<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ui_script">
    <sys_ui_script action="INSERT_OR_UPDATE">
        <active>true</active>
        <description/>
        <global>false</global>
        <name>sn_kpi_composer.PaDashboardList</name>
        <script><![CDATA[var PaDashboardList = createReactClass({
	getInitialState: function() {
		return { add: false };
	},

	addClick: function() {
		this.setState({ add: true, saving: false });
	},
	
	onAdd: function(pa_dashboard, callback) {
		if (this.props.pa_dashboard == null) {
			this.setState({ saving: true });
			var that = this;
			this.props.onPaDashboardSave(pa_dashboard, function(error) {
				that.setState({ add: false });
				callback(error);
			});
		} else {
			//er is al een pa dashboard gekoppeld
			callback(null);
		}
	},
	
	/**
	 * When the KnowledgeArticleSelector is hidden on blur
	 * If the user selects something with the mouse click
	 * it would just hide the element and not wait for the async requests
	 * Therefore we need to keep the element there until it actually finishes the selection
	onBlur: function() {
		if (this.state.saving == true) return;
		
		this.setState({ add: false });
	},
	*/
	
	onDelete: function(sys_id) {
		this.props.onPaDashboardSave(null, function (error){
			//todo: show error
		});
	},

	handleSubmit: function(event) {
		event.preventDefault();
	},
	
	render: function() {
		var that = this;
		
		var toshow = null;
		if (this.props.pa_dashboard != null) {
			toshow =
				e(
				PaDashboardListItem,
				{ key: this.props.pa_dashboard.sys_id, pa_dashboard: this.props.pa_dashboard, onDelete: (this.props.onPaDashboardSave ? this.onDelete : null) }
			);
		} else {
			if (this.props.onPaDashboardSave) {
				if (this.state.add) {
					toshow = e(
						'li',
						{ key: 'addnew', className: 'addnew' },
						e(
							'span',
							{ className: 'icon-add-circle-empty icon'}
						),
						e(
							'form',
							{className: 'item-name', onSubmit: this.handleSubmit},
							e(
								PaDashboardSelector,
								{ placeholder: this.props.addPlaceholder, disabled: this.state.saving, onPaDashboardSelected: this.onAdd }
							)
						)
					);
				} else {
					toshow = e(
						'li',
						{ key: 'addnew', className: 'addnew', onClick: this.addClick },
						e(
							'span',
							{ className: 'icon-add-circle-empty icon'}
						),
						e(
							'div',
							{ className: 'item-name' },
							this.props.addPlaceholder
						)
					);
				}
			} else {
				toshow = e(NoneList, { key: 'none' });
			}
		}
		
		return [
			e(
				'ul',
				{ className: 'sn-widget-datalist', key: 'list' },
				toshow
			)
		];
	}
});]]></script>
        <script_name>PaDashboardList</script_name>
        <sys_class_name>sys_ui_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2019-09-25 08:14:57</sys_created_on>
        <sys_id>f04728a6db8c0050b841ba1039961989</sys_id>
        <sys_mod_count>6</sys_mod_count>
        <sys_name>sn_kpi_composer.PaDashboardList</sys_name>
        <sys_package display_value="KPI Composer" source="sn_kpi_composer">62a50aba0f800010ad8350feb6767e4f</sys_package>
        <sys_policy/>
        <sys_scope display_value="KPI Composer">62a50aba0f800010ad8350feb6767e4f</sys_scope>
        <sys_update_name>sys_ui_script_f04728a6db8c0050b841ba1039961989</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2021-04-20 14:56:58</sys_updated_on>
        <ui_type>0</ui_type>
        <use_scoped_format>false</use_scoped_format>
    </sys_ui_script>
</record_update>
